---
- name: set hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname_short }}"
  when: ansible_hostname == 'raspberrypi'

- name: update hosts
  ansible.builtin.replace:
    path: /etc/hosts
    regexp: '\braspberrypi\b'
    replace: "{{ inventory_hostname_short }}"

########################################################################
# apply best security tips from
# https://www.raspberrypi.org/documentation/configuration/security.md
########################################################################
- name: update apt packages list
  ansible.builtin.apt:
    upgrade: no
    update_cache: yes
    cache_valid_time: 86400
  tags:
    - packages

# It would be best to remove the pi user, but it's still required for some
# features.

#- name: pi password
#  ansible.builtin.user:
#    name: "{{ item.username }}"
#    password: "{{ item.password }}"
#    state: present
#    update_password: always
#  when: item.username == 'pi' and item.password is defined
#  loop: "{{ pi_users }}"

- name: create user group
  ansible.builtin.group:
    name: "{{ item.username }}"
    state: present
  loop: "{{ pi_users }}"

- name: create user
  ansible.builtin.user:
    name: "{{ item.username }}"
    password: "{{ item.password }}"
    group: "{{ item.username }}"
    state: present
    update_password: on_create
    shell: /bin/bash
  loop: "{{ pi_users }}"

- name: create .ssh directory
  ansible.builtin.file:
    dest: "/home/{{ item.username }}/.ssh"
    state: directory
    mode: 0700
    owner: "{{ item.username }}"
    group: "{{ item.username }}"
  loop: "{{ pi_users }}"
  when: item.authorized_keys | default([]) | length > 0

- name: copy authorized_keys
  copy:
    content: "{{ item.authorized_keys | default([]) | join('\n')}}"
    dest: "/home/{{ item.username }}/.ssh/authorized_keys"
    mode: 0644
    owner: "{{ item.username }}"
    group: "{{ item.username }}"
  when: item.authorized_keys | default([]) | length > 0
  loop: "{{ pi_users }}"

- name: add ssh-users group
  ansible.builtin.group:
    name: ssh-users
    state: present
  loop: "{{ pi_users }}"

- name: add users to sudo group
  ansible.builtin.user:
    name: "{{ item.username }}"
    groups: sudo
    append: yes
    state: present
  loop: "{{ pi_users }}"
  when: item.sudoer | default(false)

- name: add users to ssh-users group
  ansible.builtin.user:
    name: "{{ item.username }}"
    groups: ssh-users
    append: yes
    state: present
  loop: "{{ pi_users }}"
  when: item.ssh | default(false)

- name: remove pi sudoer
  ansible.builtin.file:
    path: "/etc/sudoers.d/010_pi-nopasswd"
    state: absent

- name: require sudo members to use password
  ansible.builtin.lineinfile:
    path: "/etc/sudoers"
    regexp: '^%sudo +ALL=\(ALL:ALL\) ALL'
    line: '%sudo   ALL=(ALL:ALL) PASSWD: ALL'
    validate: 'visudo -cf %s'

- name: update sshd on the daily
  ansible.builtin.cron:
    name: update openssh-server daily
    user: root
    minute: "0"
    hour: "0"
    day: "*"
    month: "*"
    weekday: "*"
    state: present
    job: "apt-get install openssh-server -y"

- name: allow the ssh group to use SSH
  ansible.builtin.lineinfile:
    path: "{{ sshd_config_path }}"
    insertafter: "EOF"
    line: "AllowGroups ssh-users"
    regexp: "^#?AllowGroups "
    validate: "sshd -t -f %s"
  notify:
    - reload sshd

# Set AllowUsers before adding DenyUsers to avoid locking everyone out in case something goes wrong.
- name: set users that are allowed to use SSH
  ansible.builtin.lineinfile:
    path: "{{ sshd_config_path }}"
    insertafter: "EOF"
    line: "AllowUsers {{ pi_users | selectattr('ssh') | map(attribute='username') | join(' ') }}"
    regexp: "^#?AllowUsers "
    validate: "sshd -t -f %s"
  notify:
    - reload sshd

- name: remove empty AllowUsers rule
  ansible.builtin.lineinfile:
    path: "{{ sshd_config_path }}"
    insertafter: "EOF"
    regexp: "^AllowUsers "
    validate: "sshd -t -f %s"
    state: absent
  when: pi_users | selectattr('ssh') | map(attribute='username') | length == 0
  notify:
    - reload sshd

# Set DenyUsers after adding AllowUsers to avoid locking everyone out in case something goes wrong.
- name: deny ssh to users
  ansible.builtin.lineinfile:
    path: "{{ sshd_config_path }}"
    insertafter: "EOF"
    regexp: "^#?DenyUsers "
    line: "DenyUsers {{ pi_users | rejectattr('ssh') | map(attribute='username') | join(' ') }}"
    validate: "sshd -t -f %s"
    state: present
  when: pi_users | rejectattr('ssh') | length > 0
  notify:
    - reload sshd

- name: remove empty DenyUsers rule
  ansible.builtin.lineinfile:
    path: "{{ sshd_config_path }}"
    insertafter: "EOF"
    regexp: "^DenyUsers "
    validate: "sshd -t -f %s"
    state: absent
  when: pi_users | rejectattr('ssh') | map(attribute='username') | length == 0
  notify:
    - reload sshd

- name: disable ChallengeResponseAuthentication
  ansible.builtin.lineinfile:
    path: "{{ sshd_config_path }}"
    regexp: "^#?ChallengeResponseAuthentication"
    line: "ChallengeResponseAuthentication no"
    validate: "sshd -t -f %s"
  notify:
    - reload sshd

- name: disable PasswordAuthentication
  ansible.builtin.lineinfile:
    path: "{{ sshd_config_path }}"
    regexp: "^#?PasswordAuthentication"
    line: "PasswordAuthentication no"
    validate: "sshd -t -f %s"
  notify:
    - reload sshd

# TODO(bc): install ufw
# TODO(bc): install fail2ban
